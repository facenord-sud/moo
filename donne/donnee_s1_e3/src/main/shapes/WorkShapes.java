/*
 * WorkShapes.java
 *
 * 
 */

package shapes;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.GridLayout;
import java.awt.Point;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionAdapter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Collections;
import java.util.Iterator;
import java.util.Timer;
import java.util.TimerTask;
import java.util.Vector;
import javax.swing.JPanel;
import javax.swing.JToggleButton;
import shapes.gui.About;
import shapes.gui.ChangeDialog;
import shapes.gui.CircleDialog;
import shapes.gui.ClearOneDialog;
import shapes.gui.EllipseDialog;
import shapes.gui.EnterFileNameDialog;
import shapes.gui.MoveAllDialog;
import shapes.gui.MoveDialog;
import shapes.gui.OpenShapesFileDialog;
import shapes.gui.PolygonDialog;
import shapes.gui.RectangleDialog;
import shapes.gui.ShapesJPanel;
import shapes.gui.SquareDialog;
import shapes.gui.TriangleDialog;
import shapes.gui.WrongFileNameErrorBox;

/**
 *
 * @author Andreas Ruppen
 */
public class WorkShapes extends javax.swing.JFrame {
    private static final long serialVersionUID = 3258409547344394552L;
    private static final int SIZE_LENGTH = 900;
    private static final int SIZE_HEIGHT = 500;
    private Vector<Shape> shapes = new Vector<Shape>();
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu newMenu;
    private javax.swing.JMenuItem squareMenuItem;
    private javax.swing.JMenuItem rectangleMenuItem;
    private javax.swing.JMenuItem circleMenuItem;
    private javax.swing.JMenuItem ellipseMenuItem;
    private javax.swing.JMenuItem triangleMenuItem;
    private javax.swing.JMenuItem polyMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem sortAreaItem;
    private javax.swing.JMenuItem sortPerimeterItem;
    private javax.swing.JMenuItem sortIDItem;
    private javax.swing.JMenuItem changeItem;
    private javax.swing.JMenuItem moveItem;
    private javax.swing.JMenuItem moveAllItem;
    private javax.swing.JMenuItem clearOneItem;
    private javax.swing.JMenuItem clearItem;
    private javax.swing.JMenu infoMenu;
    private javax.swing.JMenuItem gsizeMenuItem;
    private javax.swing.JMenuItem listMenuItem;
    private javax.swing.JMenuItem areaMenuItem;
    private javax.swing.JMenuItem perimeterMenuItem;
    private javax.swing.JMenu aboutMenu;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JPanel graphicalDisplay;
    private javax.swing.JLabel titleup;
    private javax.swing.JPanel textualDisplay;
    private javax.swing.JLabel titledown;
    private javax.swing.JScrollPane textscroll;
    private javax.swing.JTextArea textzone;
    // End of variables declaration//GEN-END:variables
    
    /** 
     * Creates a new WorkShapes frame.
     */
    public WorkShapes() {
        initComponents();
    }
    
    /** 
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jToggleRectangle = new javax.swing.JToggleButton();
        jToggleSquare = new javax.swing.JToggleButton();
        jToggleEllipse = new javax.swing.JToggleButton();
        jToggleCircle = new javax.swing.JToggleButton();
        jTogglePolygon = new javax.swing.JToggleButton();
        jToggleTriangle = new javax.swing.JToggleButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        newMenu = new javax.swing.JMenu();
        squareMenuItem = new javax.swing.JMenuItem();
        rectangleMenuItem = new javax.swing.JMenuItem();
        circleMenuItem = new javax.swing.JMenuItem();
        ellipseMenuItem = new javax.swing.JMenuItem();
        triangleMenuItem = new javax.swing.JMenuItem();
        polyMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        sortAreaItem = new javax.swing.JMenuItem();
        sortPerimeterItem = new javax.swing.JMenuItem();
        sortIDItem = new javax.swing.JMenuItem();
        changeItem = new javax.swing.JMenuItem();
        moveItem = new javax.swing.JMenuItem();
        moveAllItem = new javax.swing.JMenuItem();
        clearOneItem = new javax.swing.JMenuItem();
        clearItem = new javax.swing.JMenuItem();
        infoMenu = new javax.swing.JMenu();
        gsizeMenuItem = new javax.swing.JMenuItem();
        listMenuItem = new javax.swing.JMenuItem();
        areaMenuItem = new javax.swing.JMenuItem();
        perimeterMenuItem = new javax.swing.JMenuItem();
        aboutMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();
        graphicalDisplay = new javax.swing.JPanel();
        titleup = new javax.swing.JLabel();
        textualDisplay = new javax.swing.JPanel();
        titledown = new javax.swing.JLabel();
        textscroll = new javax.swing.JScrollPane();
        textzone = new javax.swing.JTextArea();
        
        jToggleRectangle.setText("Rectangle");
        jToggleRectangle.setToolTipText("create a new Rectangle");
        jToggleRectangle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleRectangleActionPerformed(evt);
            }
        });
        jToggleSquare.setText("Square");
        jToggleSquare.setToolTipText("create a new Square");
        jToggleSquare.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleSquareActionPerformed(evt);
            }
        });
        jToggleEllipse.setText("Ellipse");
        jToggleEllipse.setToolTipText("create a new Ellipse");
        jToggleEllipse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleEllipseActionPerformed(evt);
            }
        });
        jToggleCircle.setText("Circle");
        jToggleCircle.setToolTipText("create a new Circle");
        jToggleCircle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleCircleActionPerformed(evt);
            }
        });
        jTogglePolygon.setText("Polygon");
        jTogglePolygon.setToolTipText("create a new Polygon");
        jTogglePolygon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTogglePolygonActionPerformed(evt);
            }
        });
        jToggleTriangle.setText("Triangle");
        jToggleTriangle.setToolTipText("create a new Triangle");
        jToggleTriangle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleTriangleActionPerformed(evt);
            }
        });
        
        fileMenu.setText("File");
        openMenuItem.setText("Open");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        
        fileMenu.add(openMenuItem);
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsMenuItemActionPerformed(evt);
            }
        });
        
        fileMenu.add(saveAsMenuItem);
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        
        fileMenu.add(exitMenuItem);
        menuBar.add(fileMenu);
        newMenu.setText("New");
        squareMenuItem.setText("Square");
        squareMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                squareMenuItemActionPerformed(evt);
            }
        });
        
        newMenu.add(squareMenuItem);
        rectangleMenuItem.setText("Rectangle");
        rectangleMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rectangleMenuItemActionPerformed(evt);
            }
        });
        
        newMenu.add(rectangleMenuItem);
        circleMenuItem.setText("Circle");
        circleMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                circleMenuItemActionPerformed(evt);
            }
        });
        
        newMenu.add(circleMenuItem);
        ellipseMenuItem.setText("Ellipse");
        ellipseMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ellipseMenuItemActionPerformed(evt);
            }
        });
        
        newMenu.add(ellipseMenuItem);
        triangleMenuItem.setText("Triangle");
        triangleMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                triangleMenuItemActionPerformed(evt);
            }
        });
        
        newMenu.add(triangleMenuItem);
        polyMenuItem.setText("Polygon");
        polyMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                polyMenuItemActionPerformed(evt);
            }
        });
        
        newMenu.add(polyMenuItem);
        menuBar.add(newMenu);
        editMenu.setText("Edit");
        sortAreaItem.setText("Sort by area");
        sortAreaItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortAreaItemActionPerformed(evt);
            }
        });
        
        editMenu.add(sortAreaItem);
        sortPerimeterItem.setText("Sort by perimeter");
        sortPerimeterItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortPerimeterItemActionPerformed(evt);
            }
        });
        
        editMenu.add(sortPerimeterItem);
        sortIDItem.setText("Sort by ID");
        sortIDItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortIDItemActionPerformed(evt);
            }
        });
        
        editMenu.add(sortIDItem);
        changeItem.setText("Change");
        changeItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeItemActionPerformed(evt);
            }
        });
        
        editMenu.add(changeItem);
        moveItem.setText("Move");
        moveItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveItemActionPerformed(evt);
            }
        });
        
        editMenu.add(moveItem);
        moveAllItem.setText("Move all");
        moveAllItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveAllItemActionPerformed(evt);
            }
        });
        
        editMenu.add(moveAllItem);
        clearOneItem.setText("Delete a shape");
        clearOneItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearOneItemActionPerformed(evt);
            }
        });
        
        editMenu.add(clearOneItem);
        clearItem.setText("Clear all");
        clearItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearItemActionPerformed(evt);
            }
        });
        
        editMenu.add(clearItem);
        menuBar.add(editMenu);
        infoMenu.setText("Info");
        gsizeMenuItem.setText("Size of graphical zone");
        gsizeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gsizeMenuItemActionPerformed(evt);
            }
        });
        
        infoMenu.add(gsizeMenuItem);
        listMenuItem.setText("List of figures");
        listMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listMenuItemActionPerformed(evt);
            }
        });
        
        infoMenu.add(listMenuItem);
        areaMenuItem.setText("Sum of area");
        areaMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                areaMenuItemActionPerformed(evt);
            }
        });
        
        infoMenu.add(areaMenuItem);
        perimeterMenuItem.setText("Sum of perimeters");
        perimeterMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                perimeterMenuItemActionPerformed(evt);
            }
        });
        
        infoMenu.add(perimeterMenuItem);
        menuBar.add(infoMenu);
        aboutMenu.setText("?");
        aboutMenuItem.setText("About...");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        
        aboutMenu.add(aboutMenuItem);
        menuBar.add(aboutMenu);
        
        getContentPane().setLayout(new java.awt.GridBagLayout());
        java.awt.GridBagConstraints gridBagConstraints1;
        
        setTitle("Shapes : Genie Logiciel I 2012");
        setName("ShapeFrame");
        setResizable(false);
        setBackground(java.awt.Color.white);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });
        
        graphicalDisplay.setLayout(new java.awt.BorderLayout());
        
        graphicalDisplay.setForeground(java.awt.Color.white);
        graphicalDisplay.setBackground(java.awt.Color.black);
        graphicalDisplay.setPreferredSize(new java.awt.Dimension(SIZE_LENGTH, SIZE_HEIGHT));
        graphicalDisplay.setMinimumSize(new java.awt.Dimension(100, 100));
        
        buttonDisplay = new JPanel(new GridLayout(6, 1));
        buttonDisplay.add(jToggleRectangle);
        buttonDisplay.add(jToggleSquare);
        buttonDisplay.add(jToggleEllipse);
        buttonDisplay.add(jToggleCircle);
        buttonDisplay.add(jTogglePolygon);
        buttonDisplay.add(jToggleTriangle);
        graphicalDisplay.add(buttonDisplay, java.awt.BorderLayout.WEST);
        
        titleup.setText("Graphical Information");
        titleup.setForeground(java.awt.Color.white);
        titleup.setBackground(java.awt.Color.black);
        titleup.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleup.setFont(new java.awt.Font("Dialog", 1, 14));
        graphicalDisplay.add(titleup, java.awt.BorderLayout.NORTH);
        
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridx = 0;
        gridBagConstraints1.gridy = 0;
        gridBagConstraints1.gridheight = 10;
        gridBagConstraints1.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints1.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints1.weightx = 1.0;
        gridBagConstraints1.weighty = 0.75;
        getContentPane().add(graphicalDisplay, gridBagConstraints1);
        
        textualDisplay.setLayout(new java.awt.BorderLayout());
        
        textualDisplay.setBackground(java.awt.Color.black);
        textualDisplay.setPreferredSize(new java.awt.Dimension(800, 240));
        textualDisplay.setMinimumSize(new java.awt.Dimension(100, 100));
        textualDisplay.setAutoscrolls(true);
        titledown.setText("Textual Information");
        titledown.setForeground(java.awt.Color.white);
        titledown.setBackground(java.awt.Color.black);
        titledown.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titledown.setFont(new java.awt.Font("Dialog", 1, 14));
        titledown.setBorder(new javax.swing.border.LineBorder(java.awt.Color.black));
        textualDisplay.add(titledown, java.awt.BorderLayout.NORTH);
        
        textscroll.setBackground(new java.awt.Color(233, 233, 233));
        textscroll.setPreferredSize(new java.awt.Dimension(800, 200));
        textscroll.setMinimumSize(new java.awt.Dimension(800, 100));
        textscroll.setFont(new java.awt.Font("Verdana", 0, 12));
        textzone.setEditable(false);
        textzone.setFont(new java.awt.Font("Verdana", 0, 12));
        textzone.setPreferredSize(new java.awt.Dimension(1050, 600));
        textzone.setBorder(null);
        textzone.setMinimumSize(new java.awt.Dimension(1050, 300));
        textscroll.setViewportView(textzone);
        
        textualDisplay.add(textscroll, java.awt.BorderLayout.CENTER);
        
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridx = 0;
        gridBagConstraints1.gridy = 10;
        gridBagConstraints1.gridheight = 3;
        gridBagConstraints1.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints1.anchor = java.awt.GridBagConstraints.SOUTHEAST;
        gridBagConstraints1.weightx = 1.0;
        gridBagConstraints1.weighty = 0.25;
        getContentPane().add(textualDisplay, gridBagConstraints1);
        
        setJMenuBar(menuBar);
        pack();
    }//GEN-END:initComponents
    
    private void triangleMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_triangleMenuItemActionPerformed
        new TriangleDialog(this).setVisible(true);
    }//GEN-LAST:event_triangleMenuItemActionPerformed
    
    private void clearOneItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearOneItemActionPerformed
        new ClearOneDialog(this).setVisible(true);
    }//GEN-LAST:event_clearOneItemActionPerformed

    private void moveItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveItemActionPerformed
        new MoveDialog(this).setVisible(true);
    }//GEN-LAST:event_moveItemActionPerformed
    
    private void moveAllItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveAllItemActionPerformed
        new MoveAllDialog(this).setVisible(true);
    }//GEN-LAST:event_moveAllItemActionPerformed

    private void sortIDItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortIDItemActionPerformed
        // TODO Add your code for the Serie 1(2) of Genie Logiciel here!!
        // Sort the vector shapes by the IDs...
    }//GEN-LAST:event_sortIDItemActionPerformed
    
    private void clearItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearItemActionPerformed
        shapes.clear();
        IdGenerator.getUniqueInstance().setLastId(0);
        textzone.setText("");
        graphicalDisplay.repaint();
    }//GEN-LAST:event_clearItemActionPerformed
    
    private void gsizeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gsizeMenuItemActionPerformed
        textzone.setText('\n' + "Size of graphical zone : width " +
        graphicalDisplay.getSize().width +
        " and height " +
        graphicalDisplay.getSize().height);
    }//GEN-LAST:event_gsizeMenuItemActionPerformed
    
    private void perimeterMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_perimeterMenuItemActionPerformed
        double totper = 0;
        for (int i = 0; i < shapes.size(); i++) {
            totper += shapes.elementAt(i).perimeter();
        }
        textzone.setText('\n' + "Sum of all perimeters = " + totper);
    }//GEN-LAST:event_perimeterMenuItemActionPerformed
    
    /**
     * calcule la somme de toutes les figures au clique dans le menu de "sum of area"
     * @param evt 
     */
    private void areaMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_areaMenuItemActionPerformed
        // @TODO Add your code for the Serie 1(1) of Genie Logiciel here!!
        
    }//GEN-LAST:event_areaMenuItemActionPerformed
    
    private void listMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listMenuItemActionPerformed
        refreshShapes();
    }//GEN-LAST:event_listMenuItemActionPerformed
    
    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        new About(this).setVisible(true);
    }//GEN-LAST:event_aboutMenuItemActionPerformed
    
    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        new OpenShapesFileDialog(this).setVisible(true);
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void saveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuItemActionPerformed
        new EnterFileNameDialog(this).setVisible(true);
    }//GEN-LAST:event_saveAsMenuItemActionPerformed

    private void changeItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeItemActionPerformed
        new ChangeDialog(this).setVisible(true);
    }//GEN-LAST:event_changeItemActionPerformed
    
    private void sortPerimeterItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortPerimeterItemActionPerformed
        // TODO Add your code for the Serie 1(2) of Genie Logiciel here!!
        // Sort the vector shapes by the perimeters...
    }//GEN-LAST:event_sortPerimeterItemActionPerformed
    
    private void sortAreaItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortAreaItemActionPerformed
        // TODO Add your code for the Serie 1(2) of Genie Logiciel here!!
        // Sort the vector shapes by the areas...
    }//GEN-LAST:event_sortAreaItemActionPerformed
    
    private void polyMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_polyMenuItemActionPerformed
        new PolygonDialog(this).setVisible(true);
    }//GEN-LAST:event_polyMenuItemActionPerformed
    
    private void squareMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_squareMenuItemActionPerformed
        new SquareDialog(this).setVisible(true);
    }//GEN-LAST:event_squareMenuItemActionPerformed
    
    private void rectangleMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rectangleMenuItemActionPerformed
        new RectangleDialog(this).setVisible(true);
    }//GEN-LAST:event_rectangleMenuItemActionPerformed
    
    private void circleMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_circleMenuItemActionPerformed
        new CircleDialog(this).setVisible(true);
    }//GEN-LAST:event_circleMenuItemActionPerformed
    
    private void ellipseMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ellipseMenuItemActionPerformed
        new EllipseDialog(this).setVisible(true);
    }//GEN-LAST:event_ellipseMenuItemActionPerformed
    
    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed
    
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm

    public void createNewCircle(int x, int y, int r) {
        // TODO Add your code for the Serie 1(1) of Genie Logiciel here!!
    }
    
    public void createNewTriangle(int[] vx, int[] vy) {
        // TODO Add your code for the Serie 1(1) of Genie Logiciel here!!
        refreshShapes();
    }
    
    public void createNewRectangle(int x, int y, int a, int b) {
        shapes.add(new Rectangle( x , y , a, b, Color.magenta, IdGenerator.getUniqueInstance().nextId() ));
        refreshShapes();
    }
    
    public void createNewSquare(int x, int y, int a) {
        shapes.add(new Square( x , y , a, Color.blue, IdGenerator.getUniqueInstance().nextId() ));
        refreshShapes();
    }
    
    public void createNewEllipse(int x, int y, int a, int b) {
        // TODO Add your code for the Serie 1(1) of Genie Logiciel here!!;
    }
    
    public void createNewPolygon(int[] vx, int[] vy) {
        shapes.add(new Polygon( vx , vy , Color.orange, IdGenerator.getUniqueInstance().nextId() ));
        refreshShapes();
    }

    public void changeShape(int id) {
        Shape s = findShape(id);
        if (s != null) {
            s.change();
        }
        refreshShapes();
    }
    
    public void moveShape(int id, int dx, int dy) {
        // TODO Add your code for the Serie 1(2) of Genie Logiciel here!!
        // Hint: you can use the private method findShape() here...
    }
    
    public void moveAllShapes(int dx, int dy) {
        // TODO Add your code for the Serie 1(2) of Genie Logiciel here!!
    }
    
    public void deleteShape(int id) {
        // TODO Add your code for the Serie 1(2) of Genie Logiciel here!!
        // Hint: you can use the private method findShape() here...
    }
    
    public void openShapes(String filename) {
        try {
            // TODO Add your code for the Serie 1(2) of Genie Logiciel here!!
        }
        catch (Exception e) {
            new WrongFileNameErrorBox(this).setVisible(true);
        }
        
        // TODO Add your code for the Serie 1(2) of Genie Logiciel here!!
        // Hint: to set the last ID of the IDGenerator correctly...
        
        refreshShapes();
    }
    
    public void saveShapes(String filename) {
        try {
            // TODO Add your code for the Serie 1(2) of Genie Logiciel here!!
        }
        catch (Exception e) {e.printStackTrace();
            new WrongFileNameErrorBox(this).setVisible(true);
        }
    }
    
    private void refreshShapes() {
        textzone.setText(getShapesString());
        graphicalDisplay.repaint();
    }
    
    private String getShapesString() {
        String res = '\n' + "List of figures:" + '\n';
        StringBuffer sb = new StringBuffer(res);
        for (int i = 0; i < shapes.size(); i++) {
            sb.append(shapes.elementAt(i).toString() + '\n');
        }
        return sb.toString();
    }
    
    private Shape findShape(int id) {
        for (int i = 0; i < shapes.size(); i++) {
            Shape s = shapes.elementAt(i);
            if (s.getID() == id) {
                return s;
            }
        }
        return null;
    }

    public static void main(String args[]) {
        WorkShapes ws = new WorkShapes();
        ShapesJPanel shapesJPanel = new ShapesJPanel(ws.shapes, ws.boundShapes);
        ws.addWorkShapesMouseListeners(shapesJPanel);
        ws.graphicalDisplay.add(shapesJPanel, java.awt.BorderLayout.CENTER);
        ws.setVisible(true);
    }
    
    
    
    
    
    
     /***************************************************************************
     * 
     * 
     * Classes and Methods for the Drag and Drop Support by MouseListeners
     * 
     * 
     **************************************************************************/
    
    private Shape lastShapeOnFocus = null;
    private Shape shapeOnFocus = null;
    private boolean isShapeOnFocus = false;
    private Rectangle boundUpLeft = null;
    private Rectangle boundUpRight = null;
    private Rectangle boundDownRight = null;
    private Rectangle boundDownLeft = null;
    private boolean isBoundSelected = false;
    private boolean isTargettingCoordinatesSelected = false;
    private int newShapeIdentity;
    private int rectangle = 0;
    private int square = 1;
    private int ellipse = 3;
    private int circle = 4;
    private int polygon = 5;
    private int triangle = 6;
    private Point mousePressedClick = null;
    private Point[] points = null;
    private int nextPointCounter = 0;
    private Cursor cursor;
    
    private Vector<Shape> boundShapes = new Vector<Shape>();
    private Vector<Shape> boundPolygon = new Vector<Shape>();
    private Timer timer;
    
    private javax.swing.JToggleButton jToggleRectangle;
    private javax.swing.JToggleButton jToggleSquare;
    private javax.swing.JToggleButton jToggleEllipse;
    private javax.swing.JToggleButton jToggleCircle;
    private javax.swing.JToggleButton jTogglePolygon;
    private javax.swing.JToggleButton jToggleTriangle;
    private JPanel buttonDisplay;
    
    public void addWorkShapesMouseListeners(ShapesJPanel shapesJPanel) {
        shapesJPanel.addMouseListener(new ShapesMouseListener());
        shapesJPanel.addMouseMotionListener(new MouseMotionListener());
    }
    
    private class ShapesMouseListener implements MouseListener {
        
        public void mouseClicked(MouseEvent mouseEvent) {
            //do nothing
        }
        
        public void mousePressed(MouseEvent mouseEvent) {
            
            //initialization
            mousePressedClick = new Point(mouseEvent.getX(), mouseEvent.getY());
            if (shapeOnFocus!=null) {
                if (!boundShapes.contains(shapeOnFocus))
                lastShapeOnFocus = shapeOnFocus;
            }
            else
                lastShapeOnFocus = shapeOnFocus;
            
            shapeOnFocus = null;
            isBoundSelected = false;
            
            if (isTargettingCoordinatesSelected) {
                if (nextPointCounter < 19)
                    points[nextPointCounter++] = new Point(mouseEvent.getX(), mouseEvent.getY());
                
                if (nextPointCounter>=2 && newShapeIdentity != triangle && newShapeIdentity != polygon) {
                        
                        Point p1 = new Point((int)points[0].getX(), (int)points[0].getY());
                        Point p2 = new Point((int)points[1].getX(), (int)points[1].getY());
                        Point p3 = new Point(p1.x, p2.y);
                        Point p4 = new Point(p2.x, p1.y);
                        
                        //we do not want the shape to be defined with negative hight, width, radius or other strange behaviour
                        Point pNW = new Point();
                        pNW.x = java.lang.Math.min(p1.x, p2.x);
                        pNW.x = java.lang.Math.min(pNW.x, p3.x);
                        pNW.x = java.lang.Math.min(pNW.x, p4.x);
                        pNW.y = java.lang.Math.min(p1.y, p2.y);
                        pNW.y = java.lang.Math.min(pNW.y, p3.y);
                        pNW.y = java.lang.Math.min(pNW.y, p4.y);
                        Point pSE = new Point();
                        pSE.x = java.lang.Math.max(p1.x, p2.x);
                        pSE.x = java.lang.Math.max(pSE.x, p3.x);
                        pSE.x = java.lang.Math.max(pSE.x, p4.x);
                        pSE.y = java.lang.Math.max(p1.y, p2.y);
                        pSE.y = java.lang.Math.max(pSE.y, p3.y);
                        pSE.y = java.lang.Math.max(pSE.y, p4.y);
                        
                        int dx = pSE.x - pNW.x;
                        int dy = pSE.y - pNW.y;
                        
                        if (newShapeIdentity == rectangle) {
                            createNewRectangle(pNW.x, pNW.y, dx, dy);
                            jToggleRectangle.doClick();
                        }
                        
                        if (newShapeIdentity == square) {
                            createNewSquare(pNW.x, pNW.y, dx);
                            jToggleSquare.doClick();
                        }
                        
                        if (newShapeIdentity == ellipse) {
                            createNewEllipse(pNW.x+dx/2, pNW.y+dy/2, dx/2, dy/2);
                            jToggleEllipse.doClick();
                        }
                        
                        if (newShapeIdentity == circle) {
                            createNewCircle(p1.x, p1.y, (int)java.lang.Math.sqrt(dx*dx+dy*dy));
                            jToggleCircle.doClick();
                        }
                        
                        cursor = Cursor.getDefaultCursor();
                        setCursor(cursor);
                }
                
                if (nextPointCounter>=3 && newShapeIdentity == triangle) {
                    int[] px = {(int) points[0].getX(), (int) points[1].getX(), (int) points[2].getX()};
                    int[] py = {(int) points[0].getY(), (int) points[1].getY(), (int) points[2].getY()};
                    createNewTriangle(px, py);
                    jToggleTriangle.doClick();
                    cursor = Cursor.getDefaultCursor();
                    setCursor(cursor);
                }
            }
            
            //if clicked on a bound, set the bound as shape on focus
            if (!isTargettingCoordinatesSelected)
                shapeOnFocus = getBoundClickedOn(mouseEvent.getX(), mouseEvent.getY());
            
            if (isBoundSelected) {
                if (shapeOnFocus.equals(boundUpLeft)) {
                    cursor = Cursor.getPredefinedCursor(Cursor.NW_RESIZE_CURSOR);
                    setCursor(cursor);
                }
                if (shapeOnFocus.equals(boundUpRight)) {
                    cursor = Cursor.getPredefinedCursor(Cursor.NE_RESIZE_CURSOR);
                    setCursor(cursor);
                }
                if (shapeOnFocus.equals(boundDownRight)) {
                    cursor = Cursor.getPredefinedCursor(Cursor.SE_RESIZE_CURSOR);
                    setCursor(cursor);
                }
                if (shapeOnFocus.equals(boundDownLeft)) {
                    cursor = Cursor.getPredefinedCursor(Cursor.SW_RESIZE_CURSOR);
                    setCursor(cursor);
                }
            }
            
            //if there was no click on a bound, test if a shape was selected
            if (!isBoundSelected && !isTargettingCoordinatesSelected) {
                mouseClickedShapes(mouseEvent);
                if (shapeOnFocus != null) {
                cursor = Cursor.getPredefinedCursor(Cursor.HAND_CURSOR);
                setCursor(cursor);
                }
            }
            timer = new Timer();
            timer.schedule(new GuiRefresh(), 100, 150);
        }

        public void mouseClickedShapes(MouseEvent mouseEvent) {
            
            
            //detect where the mouseclick happened - eighter on the background (then shapeOnFocus is null) or on a shape
            getShapeClickedOn(mouseEvent.getX(), mouseEvent.getY());
            
            //if clicked on the background - remove the possible prior bounds
            if (shapeOnFocus == null) {
                if (isShapeOnFocus) {
                    isShapeOnFocus = false;
                    removeSelectingRectangleOnShape();
                }
            }
            //otherwise a shape was selected
            else {
                //remove the focus from a possible prior focussed other real shape if existent and add the bounds for the focussed shape (only when you do select a real shape meaning not a bound)
                if (isShapeOnFocus) {
                    if (!shapeOnFocus.equals(lastShapeOnFocus))
                        {
                            removeSelectingRectangleOnShape();
                            addSelectingRectangleOnShape(shapeOnFocus);
                        }
                }
                //draw the focus on the selected newly shape - there was no existant selection before
                else {
                    isShapeOnFocus = true;
                    addSelectingRectangleOnShape(shapeOnFocus);
                }    
            }
        }

        public void mouseReleased(MouseEvent mouseEvent) {
            timer.cancel();
            //if a shape was selected the action will be move
            if (shapeOnFocus!=null && shapes.contains(shapeOnFocus)) {
                //move the shape to its new permanent position - done by the MouseMotionListener
                cursor = Cursor.getDefaultCursor();
                setCursor(cursor);
            }
            //if a bound was selected the action will be rezise
            if (!isTargettingCoordinatesSelected) {
                //rezise - done by the MouseMotionListener
                cursor = Cursor.getDefaultCursor();
                setCursor(cursor);
            }
            refreshShapes();
        }

        public void mouseEntered(MouseEvent mouseEvent) {
        //do nothing
        }

        public void mouseExited(MouseEvent mouseEvent) {
        //do nothing
        }
        
        private void getShapeClickedOn(int x, int y) {
            //get the iterator of shapes, no problem of concurrent access because there is only one mouse to access this method
            Iterator iter = shapes.iterator();
            while (iter.hasNext()) {
                Shape temp = (Shape) iter.next();
                if (temp.contains(new Point(x, y)))
                    shapeOnFocus = temp;
            }
        }
        
        private Shape getBoundClickedOn(int x, int y) {
            Point click = new Point(x,y);
            try {
                
                if (boundPolygon != null) {
                    for (int i = 0; i < boundPolygon.size(); i++)
                        if (boundPolygon.elementAt(i).contains(click)) {
                            isBoundSelected = true;
                            return (Rectangle) boundPolygon.elementAt(i);
                        }
                }
                
                if (boundUpLeft != null && boundUpLeft.contains(click)) {
                    isBoundSelected = true;
                    return boundUpLeft;
                    }
                if (boundUpRight != null && boundUpRight.contains(click)) {
                    isBoundSelected = true;
                    return boundUpRight;
                    }
                if (boundDownRight != null && boundDownRight.contains(click)) {
                    isBoundSelected = true;
                    return boundDownRight;
                    }
                if (boundDownLeft != null && boundDownLeft.contains(click)) {
                    isBoundSelected = true;
                    return boundDownLeft;
                    }
            } catch (Exception exception) {
            }
            return null;
        }
        
        private void addSelectingRectangleOnShape(Shape s) {
            Rectangle r = getRectangleOverShape(s);
            if (r != null) {
                boundUpLeft = new Rectangle(r.x-5, r.y-5, 10, 10, Color.BLACK, 0);
                boundUpRight = new Rectangle(r.x-5+r.wide, r.y-5, 10, 10, Color.BLACK, 0);
                boundDownRight = new Rectangle(r.x-5+r.wide, r.y-5+r.high, 10, 10, Color.BLACK, 0);
                boundDownLeft = new Rectangle(r.x-5, r.y-5+r.high, 10, 10, Color.BLACK, 0);
                boundShapes.add(boundUpLeft);
                boundShapes.add(boundUpRight);
                boundShapes.add(boundDownRight);
                boundShapes.add(boundDownLeft);
            }
            refreshShapes();
        }
        
        private Rectangle getRectangleOverShape(Shape s) {
            if (Square.class.isInstance(s))
                return (Rectangle) s;
            if (Rectangle.class.isInstance(s))
                return (Rectangle) s;
            if (Circle.class.isInstance(s)){
               Circle c = (Circle) s;
               return new Rectangle(c.x-c.wide, c.y-c.wide, 2*c.wide, 2*c.wide, Color.BLACK, 0);
            }
            if (Ellipse.class.isInstance(s)) {
               Ellipse e = (Ellipse) s;
               return new Rectangle(e.x-e.wide, e.y-e.high, 2*e.wide, 2*e.high, Color.BLACK, 0);
            }
            if (Triangle.class.isInstance(s) || Polygon.class.isInstance(s)) {
                Polygon p = (Polygon) s;
                boundPolygon = new Vector<Shape>();
                for (int i = 0; i < p.x.length; i++) {
                    Rectangle rect = new Rectangle(p.x[i]-5, p.y[i]-5, 10, 10, Color.BLACK, 0);
                    boundPolygon.add(rect);
                    boundShapes.add(rect);
                }
                return null;
            }
            else
                return null;
        }
        
        private void removeSelectingRectangleOnShape() {
            try {
                    boundShapes.remove(boundUpLeft);
                    boundShapes.remove(boundUpRight);
                    boundShapes.remove(boundDownRight);
                    boundShapes.remove(boundDownLeft);
                    
                    if (boundPolygon != null) {
                        boundShapes.clear();
                        boundPolygon.clear();
                        boundPolygon = null;
                    }
            } catch (Exception exception) {
                    //System.out.println("Warning: tried to delete a non existing bound of a shape");
            }

        }
    }
    
    private class MouseMotionListener extends MouseMotionAdapter {

        private Shape actualShapeOnFocus;

        public void mouseMoved(MouseEvent e) {
        //do nothing
        }

        public void mouseDragged(MouseEvent mouseEvent) {
            if (isBoundSelected) {
                if (boundShapes.contains(shapeOnFocus)) {
                    //resize shapes
                    int dx = mouseEvent.getX() - ((int) mousePressedClick.getX());
                    int dy = mouseEvent.getY() - ((int) mousePressedClick.getY());
                    mousePressedClick = new Point(mouseEvent.getX(), mouseEvent.getY());
                    
                    if (Polygon.class.isInstance(lastShapeOnFocus) && !Rectangle.class.isInstance(lastShapeOnFocus) && !Square.class.isInstance(lastShapeOnFocus)) {
                        Polygon polygonRezise = (Polygon) lastShapeOnFocus;
                        //add rectangle on vertices and move them around!
                        if (boundPolygon != null) {
                            for (int i = 0 ; i < polygonRezise.x.length; i++) {
                                Point p = new Point(polygonRezise.x[i], polygonRezise.y[i]);
                                if (shapeOnFocus.contains(p)) {
                                    ((Rectangle)shapeOnFocus).x += dx;
                                    ((Rectangle)shapeOnFocus).y += dy;
                                    polygonRezise.x[i] = polygonRezise.x[i] + dx;
                                    polygonRezise.y[i] = polygonRezise.y[i] + dy;
                                }
                            }
                        }
                    }
                    else {
                        if (shapeOnFocus.equals(boundUpLeft)) {
                            boundUpLeft.x = boundUpLeft.x + dx;
                            boundUpLeft.y = boundUpLeft.y + dy;
                            boundDownLeft.x = boundDownLeft.x + dx;
                            boundUpRight.y = boundUpRight.y + dy;
                        }
                        if (shapeOnFocus.equals(boundUpRight)) {
                            boundUpRight.x = boundUpRight.x + dx;
                            boundUpRight.y = boundUpRight.y + dy;
                            boundUpLeft.y = boundUpLeft.y + dy;
                            boundDownRight.x = boundDownRight.x + dx;
                        }
                        if (shapeOnFocus.equals(boundDownRight)) {
                            boundDownRight.x = boundDownRight.x + dx;
                            boundDownRight.y = boundDownRight.y + dy;
                            boundDownLeft.y = boundDownLeft.y + dy;
                            boundUpRight.x = boundUpRight.x + dx;
                        }
                        if (shapeOnFocus.equals(boundDownLeft)) {
                            boundDownLeft.x = boundDownLeft.x + dx;
                            boundDownLeft.y = boundDownLeft.y + dy;
                            boundDownRight.y = boundDownRight.y + dy;
                            boundUpLeft.x = boundUpLeft.x + dx;
                        }
                        sortBounds();
                        boolean isSquare = false;
                        if (Square.class.isInstance(lastShapeOnFocus)) {
                            isSquare= true;
                            Square squareRezise = (Square) lastShapeOnFocus;
                            
                            int boundWidth = boundDownRight.x - boundDownLeft.x;
                            int boundHight = boundDownLeft.y - boundUpLeft.y;
                            
                            int newStartX = boundUpLeft.x;
                            int newStartY = boundUpLeft.y;
                            
                            int margin = java.lang.Math.abs((boundWidth - boundHight) / 2);
                            if (boundWidth > boundHight)
                                newStartX = newStartX + margin;
                            else
                                newStartY = newStartY + margin;
                            
                            squareRezise.x = newStartX+5;
                            squareRezise.y = newStartY+5;
                            int d = java.lang.Math.min(boundWidth, boundHight);
                            squareRezise.wide = d;
                            squareRezise.high = d;
                        }
                        if (Rectangle.class.isInstance(lastShapeOnFocus) && isSquare == false) {
                            Rectangle rectangleRezise = (Rectangle) lastShapeOnFocus;
                            
                            int boundWidth = java.lang.Math.abs(boundDownRight.x - boundDownLeft.x);
                            int boundHight = java.lang.Math.abs(boundUpLeft.y - boundDownLeft.y);
                            
                            int newStartX = boundUpLeft.x;
                            int newStartY = boundUpLeft.y;
                            
                            rectangleRezise.x = newStartX+5;
                            rectangleRezise.y = newStartY+5;
                            rectangleRezise.wide = boundWidth;
                            rectangleRezise.high = boundHight;
                            
                            
                            
                            
//                            if (shapeOnFocus.equals(boundUpLeft)) {
//                                rectangleRezise.x = rectangleRezise.x + dx;
//                                rectangleRezise.y = rectangleRezise.y + dy;
//                                rectangleRezise.wide = rectangleRezise.wide - dx;
//                                rectangleRezise.high = rectangleRezise.high - dy;
//                            }
//                            if (shapeOnFocus.equals(boundUpRight)) {
//                                rectangleRezise.wide = rectangleRezise.wide + dx;
//                                rectangleRezise.y = rectangleRezise.y + dy;
//                                rectangleRezise.high = rectangleRezise.high - dy;
//                            }
//                            if (shapeOnFocus.equals(boundDownRight)) {
//                                rectangleRezise.wide = rectangleRezise.wide + dx;
//                                rectangleRezise.high = rectangleRezise.high + dy;
//                            }
//                            if (shapeOnFocus.equals(boundDownLeft)) {
//                                rectangleRezise.x = rectangleRezise.x + dx;
//                                rectangleRezise.wide = rectangleRezise.wide - dx;
//                                rectangleRezise.high = rectangleRezise.high + dy;
//                            }
                        }
                        boolean isCircle = false;
                        if (Circle.class.isInstance(lastShapeOnFocus)) {
                            isCircle = true;
                            Circle circleRezise = (Circle) lastShapeOnFocus;
                            
                            int boundWidth = boundDownRight.x - boundDownLeft.x;
                            int boundHight = boundDownLeft.y - boundUpLeft.y;
                            
                            int newCenterX = boundUpLeft.x + boundWidth/2;
                            int newCenterY = boundUpLeft.y + boundHight/2;
                            circleRezise.x = newCenterX+5;
                            circleRezise.y = newCenterY+5;
                            int radius = java.lang.Math.min(boundWidth/2, boundHight/2);
                            circleRezise.wide = radius;
//                            TODO regarder. il me semble qu'un rond n'a pas besoin de hauteur
//                            circleRezise.high = radius;
                        }
                        if (Ellipse.class.isInstance(lastShapeOnFocus) && isCircle == false) {
                            Ellipse ellipseRezise = (Ellipse) lastShapeOnFocus;
                            
                            int boundWidth = boundDownRight.x - boundDownLeft.x;
                            int boundHight = boundDownLeft.y - boundUpLeft.y;
                            
                            int newCenterX = boundUpLeft.x + boundWidth/2;
                            int newCenterY = boundUpLeft.y + boundHight/2;
                            ellipseRezise.x = newCenterX+5;
                            ellipseRezise.y = newCenterY+5;
                            ellipseRezise.wide = boundWidth/2;
                            ellipseRezise.high = boundHight/2;
                        }
                    }
                }
            }
            if (!isTargettingCoordinatesSelected && !isBoundSelected) {
                if (shapeOnFocus != null && shapes.contains(shapeOnFocus)) {
                    //move the shape to its new permanent position
                    int dx = mouseEvent.getX() - ((int) mousePressedClick.getX());
                    int dy = mouseEvent.getY() - ((int) mousePressedClick.getY());
                    mousePressedClick = new Point(mouseEvent.getX(), mouseEvent.getY());
                    shapeOnFocus.move(dx, dy);
                    
                    if (boundShapes != null) {
                        for (int i = 0; i < boundShapes.size(); i++) {
                            boundShapes.elementAt(i).move(dx, dy);
                        }
                    }
                    
                }
            }
        }
        
        private void switchBounds(Rectangle r1, Rectangle r2) {
            Rectangle temp = r1;
            r1.x = r2.x;
            r1.y = r2.y;
            r2.x =  temp.x;
            r2.y = temp.y;
        }

        private void sortBounds() {
            if (shapeOnFocus.equals(boundUpLeft)) {
                if (boundUpLeft.x > boundUpRight.x) {
                    switchBounds(boundUpLeft, boundUpRight);
                    switchBounds(boundDownLeft, boundDownRight);
                    shapeOnFocus = boundUpRight;
                    cursor = Cursor.getPredefinedCursor(Cursor.NE_RESIZE_CURSOR);
                    setCursor(cursor);
                }
                if (boundUpLeft.y > boundDownLeft.y) {
                    switchBounds(boundUpLeft, boundDownLeft);
                    switchBounds(boundUpRight, boundDownRight);
                    shapeOnFocus = boundDownLeft;
                    cursor = Cursor.getPredefinedCursor(Cursor.SW_RESIZE_CURSOR);
                    setCursor(cursor);
                }
            }
            
            if (shapeOnFocus.equals(boundUpRight)) {
                if (boundUpRight.x < boundUpLeft.x) {
                    switchBounds(boundUpRight, boundUpLeft);
                    switchBounds(boundDownRight, boundDownLeft);
                    shapeOnFocus = boundUpLeft;
                    cursor = Cursor.getPredefinedCursor(Cursor.NW_RESIZE_CURSOR);
                    setCursor(cursor);

                }
                if (boundUpRight.y > boundDownRight.y) {
                    switchBounds(boundUpRight, boundDownRight);
                    switchBounds(boundUpLeft, boundDownLeft);
                    shapeOnFocus = boundDownRight;
                    cursor = Cursor.getPredefinedCursor(Cursor.SE_RESIZE_CURSOR);
                    setCursor(cursor);
                }
            }
            
            if (shapeOnFocus.equals(boundDownLeft)) {
                if (boundDownLeft.y < boundUpLeft.y) {
                    switchBounds(boundDownLeft, boundUpLeft);
                    switchBounds(boundDownRight, boundUpRight);
                    shapeOnFocus = boundUpLeft;
                    cursor = Cursor.getPredefinedCursor(Cursor.NW_RESIZE_CURSOR);
                    setCursor(cursor);
                }
                if (boundDownLeft.x > boundDownRight.x) {
                    switchBounds(boundDownLeft, boundDownRight);
                    switchBounds(boundUpLeft, boundUpRight);
                    shapeOnFocus = boundDownRight;
                    cursor = Cursor.getPredefinedCursor(Cursor.SE_RESIZE_CURSOR);
                    setCursor(cursor);
                }
            }
            
            if (shapeOnFocus.equals(boundDownRight)) {
                if (boundDownRight.y < boundUpRight.y) {
                    switchBounds(boundDownRight, boundUpRight);
                    switchBounds(boundDownLeft, boundUpLeft);
                    shapeOnFocus = boundUpRight;
                    cursor = Cursor.getPredefinedCursor(Cursor.NE_RESIZE_CURSOR);
                    setCursor(cursor);
                }
                if (boundDownRight.x < boundDownLeft.x) {
                    switchBounds(boundDownRight, boundDownLeft);
                    switchBounds(boundUpRight, boundUpLeft);
                    shapeOnFocus = boundDownLeft;
                    cursor = Cursor.getPredefinedCursor(Cursor.SW_RESIZE_CURSOR);
                    setCursor(cursor);
                }
            }
        }
    }
    
        private void jToogleButtonActionHandler(int buttonShapeID, JToggleButton button) {
      
        if (buttonShapeID != rectangle) {
            jToggleRectangle.setSelected(false);
        }
        if (buttonShapeID != square) {
            jToggleSquare.setSelected(false);
        }
        if (buttonShapeID != ellipse) {
            jToggleEllipse.setSelected(false);
        }
        if (buttonShapeID != circle) {
            jToggleCircle.setSelected(false);
        }
        if (buttonShapeID != polygon) {
            jTogglePolygon.setSelected(false);
        }
        if (buttonShapeID != triangle) {
            jToggleTriangle.setSelected(false);
        }
        
        if (button.isSelected()) {
            isTargettingCoordinatesSelected = true;
            newShapeIdentity = buttonShapeID;
            points = new Point[20];
            nextPointCounter = 0;
            cursor = Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR);
            setCursor(cursor);
        }
        else {
            isTargettingCoordinatesSelected = false;
            cursor = Cursor.getDefaultCursor();
            setCursor(cursor);
            
            //Handling for the polygon
            if (buttonShapeID == polygon) {
                if (nextPointCounter>2 && newShapeIdentity == polygon) {
                    int[] px = new int[nextPointCounter];
                    int[] py = new int[nextPointCounter];
                    for (int i = 0; i < nextPointCounter; i++) {
                        px[i] = points[i].x;
                        py[i] = points[i].y;
                    }
                    createNewPolygon(px, py);
                }
            }
        }
    }
    
    private void jToggleRectangleActionPerformed(java.awt.event.ActionEvent evt) {
        jToogleButtonActionHandler(rectangle, jToggleRectangle);
    }
    private void jToggleSquareActionPerformed(java.awt.event.ActionEvent evt) {
        jToogleButtonActionHandler(square, jToggleSquare);
    }
    private void jToggleEllipseActionPerformed(java.awt.event.ActionEvent evt) {
        jToogleButtonActionHandler(ellipse, jToggleEllipse);
    }
    private void jToggleCircleActionPerformed(java.awt.event.ActionEvent evt) {
        jToogleButtonActionHandler(circle, jToggleCircle);
    }
    private void jTogglePolygonActionPerformed(java.awt.event.ActionEvent evt) {
        jToogleButtonActionHandler(polygon, jTogglePolygon);
    }
    private void jToggleTriangleActionPerformed(java.awt.event.ActionEvent evt) {
        jToogleButtonActionHandler(triangle, jToggleTriangle);
    }
    
    private class GuiRefresh extends TimerTask {

        @Override
        public void run() {
            
            refreshShapes();
        }
    }
}
